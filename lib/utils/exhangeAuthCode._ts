import { getActiveStorage, StorageKeys } from "../main";

export const exchangeAuthCode = async ({
    domain,
    clientId,
    code,
    getCallbackURLParams} : {
    domain: string;
    clientId: string;
    code: string;
    getCallbackURLParams: URL;
  ): Promise<OAuth2CodeExchangeResponse> {
    const activeStorage = getActiveStorage();
    activeStorage.getSessionItem(StorageKeys.state);

    
    const [code, state] = super.getCallbackURLParams(callbackURL);
    const storedStateKey = this.getCodeVerifierKey(state);
    if (!storedStateKey?.endsWith(state)) {
      throw new Error('Received state does not match stored state');
    }

    const getItem = isBrowserEnvironment()
      ? (sessionManager as unknown as BrowserSessionManager).getSessionItemBrowser
      : sessionManager.getSessionItem;

    const storedState = (await getItem.call(sessionManager, storedStateKey)) as
      | string
      | null;
    if (!storedState) {
      throw new Error('Stored state not found');
    }

    const authFlowState = JSON.parse(storedState);
    this.codeVerifier = authFlowState.codeVerifier;

    const body = new URLSearchParams({
      redirect_uri: this.config.redirectURL,
      client_id: this.config.clientId,
      code_verifier: this.codeVerifier!,
      grant_type: 'authorization_code',
      code,
    });

    const removeItem = isBrowserEnvironment()
      ? (sessionManager as unknown as BrowserSessionManager).removeSessionItemBrowser
      : sessionManager.removeSessionItem;

    activeStorage.removeSessionItem(StorageKeys.state);


    try {
      return await this.fetchTokensFor(sessionManager, body);
    } finally {
      await removeItem.call(sessionManager, this.getCodeVerifierKey(state));
    }
  }